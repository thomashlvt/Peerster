

func (s *Searcher) searchIterationOld(req *SearchRequest, completeFiles map[[32]byte]*SearchResult, waitGroup *sync.WaitGroup) {
	s.flood(req)
	timer := time.NewTicker(time.Second * FLOODTIMEOUT)

	done := false
	for !done {
		select {
		case <- timer.C:
			done = true
		case reply := <- s.searchReplies:
			results := s.processSearchReply(reply)

			// Add results to complete files
			for _, result := range results {
				meta := To32Byte(result.MetafileHash)
				if _, exists := completeFiles[meta]; !exists {
					completeFiles[meta] = result
				}
			}

			// Process results
			for _, result := range results {
				waitGroup.Add(1)
				go s.processCompleteFile(result, reply.Origin, waitGroup)
			}

			if len(completeFiles) >= MATCHTHRESHOLD {
				done = true
			}
		}
	}
}